

class GUI:
    def __init__(self, data, model):
        self.data = data
        self.model = model

    def draw_graph(self):
        # Create TGraphErrors
        graph = ROOT.TGraphErrors()
        for i in range(len(self.data.T)):
            graph.SetPoint(i, self.data.T[i], self.data.MoQ[i])
            graph.SetPointError(i, self.data.TError[i], self.data.MoQError[i])

        # Set titles and labels
        graph.SetTitle("Mass Calibration; T; MoQ")
        graph.SetMarkerStyle(21)
        graph.SetMarkerSize(1)
        graph.SetMarkerColor(ROOT.kBlue)

        # Draw the graph
        canvas = ROOT.TCanvas("canvas", "Mass Calibration", 800, 600)
        canvas.Divide(2, 2)
        canvas.cd(1)
        graph.Draw("AP")

        # Perform a polynomial fit of degree 2
        fit = ROOT.TF1("fit", "pol2", self.data.T[0], self.data.T[-1])
        graph.Fit(fit, "RNQ")

        # Draw the fit result
        fit.Draw("same")

        # Print fitting parameters
        fit_params = [fit.GetParameter(i) for i in range(3)]
        print(f"Fitting parameters: a0 = {fit_params[0]}, a1 = {fit_params[1]}, a2 = {fit_params[2]}")

        self.model.fit()

        if self.model.beta:
            # Create a TF1 object using the beta parameters from weighted least squares
            func = ROOT.TF1("func", f"[0] + [1]*x + [2]*x*x", self.data.T[0], self.data.T[-1])
            func.SetParameter(0, float(self.model.beta[0]))
            func.SetParameter(1, float(self.model.beta[1]))
            func.SetParameter(2, float(self.model.beta[2]))

            # Draw the function on the canvas
            func.SetLineColor(ROOT.kGreen)
            canvas.cd(2)
            graph.Draw("AP")
            func.Draw("same")

            # Create residuals for fit
            canvas.cd(3)
            residuals_fit = ROOT.TGraphErrors()
            for i in range(len(self.data.T)):
                residual_fit = self.data.MoQ[i] - fit.Eval(self.data.T[i])
                residuals_fit.SetPoint(i, self.data.T[i], residual_fit)
                residuals_fit.SetPointError(i, 0, self.data.MoQError[i])
            residuals_fit.SetTitle("Residuals of ROOT Fit; T; Residuals")
            residuals_fit.SetMarkerStyle(21)
            residuals_fit.SetMarkerSize(1)
            residuals_fit.SetMarkerColor(ROOT.kRed)
            residuals_fit.Draw("AP")

            # Create residuals for func
            canvas.cd(4)
            residuals_func = ROOT.TGraphErrors()
            for i in range(len(self.data.T)):
                residual_func = self.data.MoQ[i] - func.Eval(self.data.T[i])
                residuals_func.SetPoint(i, self.data.T[i], residual_func)
                residuals_func.SetPointError(i, 0, self.data.MoQError[i])
            residuals_func.SetTitle("Residuals of Weighted Least Squares Fit; T; Residuals")
            residuals_func.SetMarkerStyle(21)
            residuals_func.SetMarkerSize(1)
            residuals_func.SetMarkerColor(ROOT.kGreen)
            residuals_func.Draw("AP")

        # Update and save the canvas
        canvas.Update()
        canvas.SaveAs("MassCalibrationFit.png")
